#!/usr/bin/env bash
# mindbender-produce-reports -- produce all reports by instantiating what's enumerated in the dashboard configuration
# Usage:
# > mindbender produce-reports SNAPSHOT_DIR
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2015-02-08
set -eu

[[ $# -gt 0 ]] || usage "$0" "Missing SNAPSHOT_DIR"
SnapshotDir=$1; shift

# find path to the DeepDive app based on the snapshot path
DEEPDIVE_APP=$(find-deepdive-app)
export DEEPDIVE_APP

reportTemplateImportOrder=(
"$MINDBENDER_HOME"/etc/report-templates
"$DEEPDIVE_APP"/report-templates
)

# make sure there is a reports.conf dashboard configuration in DeepDive app as well as the given snapshot
if ! [[ -e "$DEEPDIVE_APP"/reports.conf ]]; then
    # install default reports.conf if not there
    cp -f "$MINDBENDER_HOME"/etc/reports.conf "$DEEPDIVE_APP"/
    error "Default reports.conf was installed to the DeepDive app $DEEPDIVE_APP" || true
fi
cp -f "$DEEPDIVE_APP"/reports.conf "$SnapshotDir"/

# move into the given snapshot
cd "$SnapshotDir" || error "$SnapshotDir: No such snapshot"
[[ -r reports.conf ]] || error "$SnapshotDir/reports.conf: missing configuration"

## some utility commands
escape-shell-string() {
    local s=
    for s; do
        sq=${s//\'/\'\\\'\'}
        echo "'$sq'"
    done
}
json-string() {
    local s=
    for s; do
        s=${s//\"/\\\"}
        echo -n "\"$s\""
    done
}
quote-html-attr() {
    local s=
    for s; do
        s=${s//&/&amp;}
        s=${s//</&lt;}
        s=${s//\"/&quot;}
        echo -n "$s"
    done
}
merge-order-specs() {
    # An order specification is a file listing a path name per line
    # where a line may optionally be a single * (asterisk) character
    # that denotes the position of the paths not mentioned explicitly should be ordered.
    # This command take two or more order specs and produces a single one.
    local a=$1; shift
    local out=$(mktemp "$a".XXXXXX)
    touch "$a"
    {
        # put the top halves of the order specs first
        sed '/^\*$/,$d' <"$a"
        local b= bs=
        bs=()
        for b; do
            sed '/^\*$/,$d' <"$b"
            if [[ ${#bs[@]} -eq 0 ]]; then
                bs=("$b")
            else
                bs=("$b" "${bs[@]}")
            fi
        done
        # wildcard line
        echo '*'
        # then the bottom halves follow in reverse order
        for b in "${bs[@]}"; do sed '1,/^\*$/d' <"$b"; done
        sed '1,/^\*$/d' <"$a"
    } >"$out"
    mv -f "$out" "$a"
}
list-breadcrumb-paths() {
    local path=$1
    local prefix= head= tail=
    while [[ -n "$path" ]]; do
        case $path in
            */*)
                tail=${path#*/}
                head=${path%$tail}
                path=${path#$head}
                ;;
            *)
                head=$path
                path=
        esac
        prefix+=$head
        echo "$prefix"
    done
}

## commands for report-template and instance handling
list-all-reports() {
    local instance=$1; shift
    # find all executable report.sh in the given instance and output their dirnames
    (
        cd "$instance"
        list-reports() {
            # consider a directory as a report if any of these statisfy:
            # - an executable report.sh exists
            # - a README.md.in file exists
            find "$@" \
                \( -name report.sh \
                -o -name README.md.in \
                \)
        }
        if [[ -s reports.order ]]; then
            # if the order is specified, list paths carefully 
            local listed=$(mktemp -d "${TMPDIR:-/tmp}"/order-by.XXXXXXX)
            {
                # first, print the top half
                sed '/^\*$/,$d' <reports.order |
                (
                    set --; while read globPattern; do set -- "$@" $globPattern; done
                    [[ $# -eq 0 ]] || list-reports "$@"
                ) | tee "$listed"/either
                # next, get the bottom half
                sed '1,/^\*$/d' <reports.order |
                (
                    set --; while read globPattern; do set -- "$@" $globPattern; done
                    [[ $# -eq 0 ]] || list-reports "$@"
                ) | tee "$listed"/bottom >>"$listed"/either
                # print the rest in the middle excluding those either in top or bottom
                list-reports * | sort | grep -vxFf "$listed"/either
                # finally, print the bottom
                cat "$listed"/bottom
            } |
            awk '!seen[$0]++ {print}'  # and show the first occurences only
            rm -rf "$listed"
        else
            # otherwise, just enumerate reports
            list-reports * | sort
        fi |
        while read file; do dirname "$file"; done
    )
}
create-report-instance() {
    local name=$1; shift
    # create a directory for the report instance
    local instance=
    if [[ -e "$name" ]]; then
        local serial=2
        while [[ -e "$name-$serial" ]]; do
            let ++serial
        done
        instance="$name-$serial"
    else
        instance=$name
    fi
    mkdir -p "$instance"
    # import all report templates found by $name
    local numImports=0
    for dir in "${reportTemplateImportOrder[@]}"; do
        local template="$dir/$name"
        [[ -d "$template" ]] || continue
        # clone all template files into the instance
        rsync -a "$template"/ "$instance"/ --exclude=reports.order
        # merge reports.order
        ! [[ -s "$template"/reports.order ]] ||
            merge-order-specs "$instance"/reports.order "$template"/reports.order
        let ++numImports
    done
    [[ $numImports -gt 0 ]] || error "$name: No such report template"
    # make sure all nested reports in the instance inherits their parents' report.params
    list-all-reports "$instance" |
    (
        cd "$instance"
        while read report; do
            case $report in
                .) ;;
                *) report="./$report"
            esac
            list-breadcrumb-paths "$report" |
            while read d; do
                cat "$d"/report.params 2>/dev/null || true
            done >"$report"/.report.params
        done
    )
    echo "$instance"
}
record-report-params() {
    local reportPath=$1; shift
    local reportName=$1; shift
    (
        cd "$reportPath"
        # generate .report.params.sh (recording given parameters in shell script) based on report.params specification
        {
            # produce a line for each parameter passed
            echo "# named parameters given"
            local namedParam=
            for namedParam; do
                local name=${namedParam%%=*}
                local value=${namedParam#*=}
                echo "export $name=$(escape-shell-string "$value")"
            done
            echo
        } >.report.params.sh
        : >.report.params.required
        : >.report.params.optional

        # interpret the report.params specification
        if [[ -e .report.params ]]; then
            # vocabularies allowed in the report.params file, to generate shell script lines
            required() {
                local name=$1; shift
                local desc=$1; shift
                echo >>.report.params.sh ": \${$name:?$desc} # required"
                echo >>.report.params.required "$name"
            }
            optional() {
                local name=$1; shift
                local valueDefault=$1; shift
                local desc=$1; shift
                echo >>.report.params.sh ": \${$name:=$valueDefault}  # $desc"
                echo >>.report.params.optional "$name"
            }
            ( source .report.params )
            echo export $(cat .report.params.{required,optional}) >>.report.params.sh
        fi

        # TODO warn extra params

        # record parameters in JSON as well
        local paramsArgs='"$@"'
        for name in $(cat .report.params.{required,optional} 2>/dev/null); do
            paramsArgs+=' '$name'="$'$name'"'
        done
        bash -c "
            source .report.params.sh
            rm -f report.params.json
            JSON_FILE=report.params.json \\
                report-values $paramsArgs
        " "$@"

        # generate a report id from the required parameters
        local idFormat="%s" idArgs=$(escape-shell-string "$reportName")
        for name in $(cat .report.params.required 2>/dev/null); do
            idFormat+=" %s"
            idArgs+=' "$'"$name"'"'
        done
        bash -c "
            source .report.params.sh
            printf '$idFormat' $idArgs
        " >.report.id 
        # mark them read-only
        chmod -w .report.params* .report.id
    )
}
produce-report() {
    local reportPath=$1; shift
    local reportName=$1; shift
    # run report.sh under an isolated environment
    (
        cd "$reportPath"
        # load parameters
        source .report.params.sh
        # execute report.sh and mark it as done afterwards
        if [[ -x report.sh ]]; then
            # passing full path to the script as argv[0] for better error messages
            exec -a "$SnapshotDir/$reportPath/report.sh" ./report.sh
            chmod -x report.sh
        elif [[ -e report.sh ]]; then
            # warn about executable bit
            error "$SnapshotDir/$reportPath/report.sh: skipped because not executable" || true
        fi
        # compile executable documents (*.in) under the same environment
        if ls *.in &>/dev/null; then
            (
                # move up to the app to show better error messages
                cd "$DEEPDIVE_APP"
                compile-xdocs "$SnapshotDir/$reportPath"/*.in
            )
        fi
    )
    register-report "$reportPath" "$reportName" "$@"
}

## commands for producing the snapshot-level report
begin-report() {
    # initialize
    : >reports.paths

    timestamp=$(date +%FT%T)

    cat >README.md <<EOF
# $SnapshotDir
Produced: $timestamp

EOF

    {
        echo "<!-- Generated: $timestamp -->"
        echo "<section>"
    } >index.html
}
end-report() {
    # no-op
    {
        echo "</section>"
    } >>index.html
}
register-report() {
    local reportPath=$1; shift
    local reportName=$1; shift

    # record path to the report
    echo "$reportPath" >>reports.paths

    # concatenate the produced report to the snapshot-level README.md
    {
        cat "$reportPath"/README.md
        echo
    } >>README.md

    # add blocks to the dashboard index
    {
        reportPathQuoted=$(quote-html-attr "$reportPath")
        cat <<-EOF
	<div mb-report="$reportPathQuoted"
	     name="$(quote-html-attr "$reportName")"
	     $(
                for namedParam; do
                    paramName=${namedParam%%=*}
                    paramName=${paramName//_/-}
                    paramValue=${namedParam#*=}
                    echo "    param-$paramName=\"$(quote-html-attr "$paramValue")\""
                done
            )></div>
	EOF
    } >>index.html
}

## commands reports.conf is expected to rely on
section() {
    local title=$1
    # add a heading for this section in snapshot-level README.md
    {
        echo
        echo "# $title"
        echo
    } >>README.md
    {
        echo "</section>"
        echo
        echo "<section>"
        echo "<h1>$title</h1>"
    } >>index.html
}
report() {
    local reportBaseName=$1; shift
    local instance=$(create-report-instance "$reportBaseName" "$@")
    report-log "Instantiated $SnapshotDir/$instance${*:+ ($*)}"
    # run all report.sh scripts found in the report instance
    list-all-reports "$instance" |
    while read report; do
        # determine name and path
        reportName=$reportBaseName reportPath=$instance
        case $report in .) ;; *) reportName+="/$report" reportPath+="/$report"; esac
        report-log "Producing $SnapshotDir/$reportPath"
        # first record parameter bindings for the instance
        record-report-params "$reportPath" "$reportName" "$@"
        # then produce the report
        produce-report "$reportPath" "$reportName" "$@"
    done
    report-log "Produced $SnapshotDir/$instance"
}


## produce reports as per dashboard configuration in the snapshot
set -o pipefail
trap 'report-log "Aborting due to an error"; error "Failed producing reports"' ERR
{
report-log "Producing reports under $SnapshotDir/"

# use dashboard configuration to produce reports
begin-report
( . reports.conf )
end-report

numReports=$(wc -l <reports.paths || echo 0)
report-log "Produced $numReports reports under $SnapshotDir/"
} 2>&1 | tee -a reports.log
