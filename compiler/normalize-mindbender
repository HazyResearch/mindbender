#!/usr/bin/env coffee
# normalize-mindbender -- Expand most syntactic sugar to normalize MindBender specification
# Usage: normalize-mindbender MB_FILE_IN_JSON
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2014-09-30

fs = require "fs"
_ = require "underscore"

[configFile] = process.argv[2..]

try
    # parse the JSON MindBender spec
    mbConfig = JSON.parse (fs.readFileSync configFile)
    mb = mbConfig.mindbender

    for name,artifact of mb.artifacts
        # TODO add all inferred input artifacts from schema, producer, etc.

        # expand references in schema with lineage field populated (schema.*.lineage)
        for attrName,srcAttrRef of artifact.schema when (typeof srcAttrRef) is "string"
            # resolve the reference
            ref = srcAttrRef
            until typeof ref isnt "string"
                [srcArtifactName, srcAttrName] = ref.split ".", 2
                unless (srcArtifact = mb.artifacts[srcArtifactName])?
                    throw new Error "No such artifact '#{srcArtifactName}' referenced as '#{srcAttrRef}' from '#{name}.#{attrName}'"
                unless (srcAttr = srcArtifact.schema?[srcAttrName])?
                    throw new Error "No such attribute '#{srcAttrName}' in artifact '#{srcArtifactName}' referenced from '#{name}.#{attrName}'"
                ref = srcAttr
            attr = _.clone srcAttr
            delete attr.variable
            attr.lineage = srcAttrRef
            artifact.schema[attrName] = attr
            # TODO Does the artifact that is referred from the schema always has to be a direct input of this artifact?
            # Inferring the inputs of artifacts should better stay optional.
            ## add the referred artifact to input
            #artifact.inputs ?= []
            #artifact.inputs.push srcArtifact if srcArtifact not in artifact.inputs

    # TODO more normalizations

    console.log (JSON.stringify mbConfig, null, 2)
    # exit with zero status if everything went well
    process.exit 0
catch err
    console.error err.message

# exit with non-zero status by default
process.exit 2
