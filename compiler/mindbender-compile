#!/usr/bin/env bash
# mindbender-compile -- Compiles given MindBender specification
# Usage: mindbender compile MB_FILE [OUTPUT_DIR]
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2014-09-26
set -eu

if [[ $# -gt 0 ]]; then
    ConfigFile=$1; shift
elif [[ -e application.mb ]]; then
    ConfigFile=application.mb
else
    usage "$0" "MB_FILE must be specified"
fi
OutputDir=${1:-}
if [[ -z "$OutputDir" ]]; then
    case $(basename "$ConfigFile") in
        application.mb)
            # TODO Use dated snapshot dirs, with a stable symlink pointing to the latest
            OutputDir=$(dirname "$ConfigFile")
            ;;
        *)
            OutputDir=${ConfigFile%.mb}.deepdive
    esac
fi
SourceDir=$(cd "$(dirname "$ConfigFile")" && pwd -P)

[[ -e "$ConfigFile" ]] || error "$ConfigFile: Not found"
[[ -r "$ConfigFile" ]] || error "$ConfigFile: Not accessible"

# Initialize output dir
mkdir -p "$OutputDir"
jsonFile=application.mb.orig.json
jsonFileNormalized=application.mb.json

# TODO copy over all files under $SourceDir/ to $OutputDir/? (unless they are same)

# Set up and load environment for parsing the Mindbender program
(
export APP_HOME=${APP_HOME:-$OutputDir}
. "$MINDBENDER_HOME/etc/skeleton-env.sh"
! [[ -r "$OutputDir"/env.sh ]] || . "$OutputDir"/env.sh

# Parse MindBender HOCON into JSON falling back to the skeleton
hocon2json "$ConfigFile" "$MINDBENDER_HOME/etc/skeleton.mb" >"$OutputDir/$jsonFile"
# TODO use different skeleton.mb depending on backend db
)

# Keep a copy of the original MindBender specification
[[ "$ConfigFile" -ef "$OutputDir/application.mb" ]] ||
cp -pf "$ConfigFile" "$OutputDir/application.mb"

cd "$OutputDir"

# Normalize most syntactic sugars first
normalize-mindbender "$jsonFile" >"$jsonFileNormalized"

# Check if the specification is valid
# TODO validate with Avro or JSON schema?
# See: http://avro.apache.org/docs/current/gettingstartedpython.html
# See: http://json-schema.org
validate-mindbender "$jsonFileNormalized"

mkdir -p ddl ext schemas tooling
# Generate DeepDive application.conf
generate-deepdive-application "$jsonFileNormalized" >application.conf
# TODO codegen ddl, meta, schemas, tooling

# Generate SQL scripts
generate-ddl-scripts "$jsonFileNormalized" ddl

echo "Generated $OutputDir"
