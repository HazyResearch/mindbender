deepdive {

  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME} # "
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
  }

  # Put your variables here
  schema.variables {
    has_spouse.is_true: Boolean
  }

  # Put your extractors here
  extraction.extractors {

    # Clean sentence table
    ext_clear_sentence {
      style: "sql_extractor"
      sql: """DELETE FROM sentences;"""
    }

    # Clean output tables of all extractors
    ext_clear_table {
      style: "sql_extractor"
      sql: """
        DELETE FROM people_mentions;
        DELETE FROM has_spouse;
        DELETE FROM has_spouse_features;
        """
    }

    # nlp_extractor only supports the default extractor.
    ext_sentences {
      input: """
        SELECT article_id, text
        FROM articles
        ORDER BY article_id ASC
        """
      output_relation: "sentences"
      udf: "examples/nlp_extractor/run.sh -k article_id -v text -l 120 -t 4"
      input_batch_size: 10
      output_batch_size: 1000
      parallelism: 8
      dependencies: ["ext_clear_sentence"]
    }

    # With a tsv_extractor, developers have to make sure arrays
      # are parsable in the UDF. One easy way is to
      # use "array_to_string(array, delimiter)" function by psql.
    ext_people {
      input: """
          SELECT  sentence_id,
                  array_to_string(words, '~^~'),
                  array_to_string(ner_tags, '~^~')
          FROM    sentences
          """
      output_relation: "people_mentions"
      udf: ${APP_HOME}"/udf/ext_people.py"
      dependencies: ["ext_sentences", "ext_clear_table"]
      input_batch_size: 4000
      style: "tsv_extractor"
    }

    ext_has_spouse_candidates {
      input: """
       SELECT p1.sentence_id,
              p1.mention_id, p1.text,
              p2.mention_id, p2.text
        FROM  people_mentions p1,
              people_mentions p2
        WHERE p1.sentence_id = p2.sentence_id
          AND p1.mention_id != p2.mention_id;
          """
      output_relation: "has_spouse"
      udf: ${APP_HOME}"/udf/ext_has_spouse.py"
      dependencies: ["ext_people"]
      style: "tsv_extractor"
    }

    ext_has_spouse_features {
      input: """
        SELECT  array_to_string(words, '~^~'),
                has_spouse.relation_id,
                p1.start_position,
                p1.length,
                p2.start_position,
                p2.length
        FROM    has_spouse,
                people_mentions p1,
                people_mentions p2,
                sentences
        WHERE   has_spouse.person1_id = p1.mention_id
          AND   has_spouse.person2_id = p2.mention_id
          AND   has_spouse.sentence_id = sentences.sentence_id;
        """
      output_relation: "has_spouse_features"
      udf: ${APP_HOME}"/udf/ext_has_spouse_features.py"
      dependencies: ["ext_has_spouse_candidates"]
      style: "tsv_extractor"
    }

  }

  inference.factors: {

    # We require developers to select:
    #   - reserved "id" column,
    #   - variable column,
    #   - weight dependencies,
    # for variable tables.
    f_has_spouse_features {
      input_query: """
        SELECT  has_spouse.id AS "has_spouse.id",
                has_spouse.is_true AS "has_spouse.is_true",
                feature
        FROM    has_spouse,
                has_spouse_features
        WHERE   has_spouse_features.relation_id = has_spouse.relation_id
        """
      function: "IsTrue(has_spouse.is_true)"
      weight: "?(feature)"
    }

    f_has_spouse_symmetry {
      input_query: """
        SELECT  r1.is_true AS "has_spouse.r1.is_true",
                r2.is_true AS "has_spouse.r2.is_true",
                r1.id AS "has_spouse.r1.id",
                r2.id AS "has_spouse.r2.id"
        FROM    has_spouse r1,
                has_spouse r2
        WHERE   r1.person1_id = r2.person2_id
          AND   r1.person2_id = r2.person1_id
          """
      function: "Equal(has_spouse.r1.is_true, has_spouse.r2.is_true)"
      # weight: "10" # We are pretty sure about this rule
      weight: "?" # We are pretty sure about this rule
    }

  }

  # # An example of how to use the last factor graph!
  # pipeline.relearn_from: ${DEEPDIVE_HOME}"/out/2014-04-19T190341/"

  # # If you want to re-extract all sentences:
  # pipeline.run: "nlp"
  # pipeline.pipelines.nlp: ["ext_sentences"]
  pipeline.run: "nonlp"
  pipeline.pipelines.nonlp: [
    "ext_clear_table",
    "ext_people",
    "ext_has_spouse_candidates",
    "ext_has_spouse_features",
    "f_has_spouse_features",
    "f_has_spouse_symmetry"
    ]

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.25
  # sampler.sampler_args: "-l 1000 -s 1 -i 1000 --alpha 0.1 --diminish 0.99"

}
