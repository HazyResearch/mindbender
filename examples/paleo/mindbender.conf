mindbender: {
  artifacts: {
    ################################################################
    Entity_temporal: {
      for: { s: Sentence }
      using: {
        zlib: python('udf/z-lib.py')
        UdfTemporalLocal: python('udf/z-ext_temporal_local.py')
      }
      let: {
        all_phrases: zlib.get_all_phrases_in_sentence(s.words, 3)
        res: UdfTemporalLocal.main (s.words, all_phrases)
      }
      return: {
        for: { r: res }
        return: {
          sent       : s            :: Sentence
          start      : r.start      :: bigint
          end        : r.end        :: bigint
          type       : r.type       :: text
          entity     : r.entity     :: text
          is_correct : r.is_correct :: boolean
        }
      }
    }

    ################################################################
    Entity_formation_local: {  # Similar to Entity_temporal
      for: { s: Sentence }
      using: {
        zlib: python('udf/z-lib.py')
        UdfFormationLocal: python('udf/z-ext_formation_local.py')
      }
      let: {
        all_phrases: zlib.get_all_phrases_in_sentence(s.words, 5)
        res: UdfFormationLocal.main(s.words, s.ners, s.lemmas, all_phrases)
      }
      return: {
        for: { r: res }
        return: {
          sent       : s            :: Sentence
          start      : r.start      :: bigint
          end        : r.end        :: bigint
          type       : r.type       :: text
          entity     : r.entity     :: text
          is_correct : r.is_correct :: boolean
        }
      }
    }

    # TODO: We should be able to pass to a python function a user-created array of values
    # SOLN: For now, we can express it as "c for {c} in a.b" in order to get an array of c's
    #       each of which belongs to each element of b.
    Entity_formation_global: {
      for: { s: Sentence }
      using: {
        zlib: python('udf/z-lib.py')
        UdfFormationGlobal: python('udf/z-ext_formation_global.py')
      }
      let: {
        all_phrases: zlib.get_all_phrases_in_sentence(s.words, 5)
        entitiesWithTypes: {
          for: { e: Entity_formation_local }
          where: [ e...docid = s.docid ]
          return: {
            entity: e.entity
            type: e.type
          }
        }
        dicts: UdfFormationGlobal.aux( entitiesWithTypes )
        # Alternatively, we could allow a one-liner expr as function call argument. TODO decide which is better
        #dicts: UdfFormationGlobal.aux( {entity:e.entity, type:e.type} for e in Entity_formation_local when e...docid = s.docid )  ########## HERE!
        res: UdfFormationGlobal.main(s.words, s.lemmas, all_phrases,
                       dicts.good_names, dicts.local_entities, dicts.local_entity_types)
      }
      return: {
        for: { r: res }
        return: {
          sent       : s            :: Sentence
          start      : r.start      :: bigint
          end        : r.end        :: bigint
          type       : r.type       :: text
          entity     : r.entity     :: text
          is_correct : r.is_correct :: boolean
        }
      }
    }

    ################################################################
    # NOTE: This artifact is not in an original appl.conf!
    Entity: [
        # NOTE:
        #   Here "entity_obj" has a type "Entity_formation_local + ... + Entity_location" (which is sum type).
        #   It is also a restricted form of sum type but not much restricted as "Entity_formation.content"
        #   because "Entity_formation", ..., "Entity_location" have the same fields but with different types
        #   (For example, "entity_obj.content" can have type "Entity_formation_local + Entity_formation_global"
        #    or type "Entity_location_local + Entity_formation_global".)
        #   However, the types of corresponding "leaf" fields are the same.
        #   (For example, "entity_obj.content.s.docid" always has type "text".)
        # CONCLUSION: 
        #   From PaleoDB example, we see that only restricted form of sum type is necessary.
        #   In other words, I think that allowing such sum types that
        #   each type constituting the sum type has exactly the same fields  with the same types
        #   (only for "leaf" fields) is enough to implement most DeepDive applications.
        #   Moreover, sum type is used only when we merge several tables (that have exactly the same structure).
        {
          for: { e_for: Entity_formation_local }
          return: {
            type       : 'FORMATION' :: text
            entity_obj : e_for       :: Entity_formation_local
          } }
        {
          for: { e_for: Entity_formation_global }
          return: {
            type       : 'FORMATION' :: text
            entity_obj : e_for       :: Entity_formation_global
          } }
        {
          for: { e_tem: Entity_temporal }
          return: {
            type       : 'INTERVAL'  :: text
            entity_obj : e_tem       :: Entity_temporal
          } }
        {
          for: { e_tax: Entity_taxon }
          return: {
            type       : 'TAXON-' || e_tax...type :: text
            entity_obj : e_tax       :: Entity_taxon
          } }
        {
          for: { e_loc: Entity_location }
          return: {
            type       : 'LOCATION'  :: text
            entity_obj : e_loc       :: Entity_location
          } }
    ]

    # TODO find if there's a pattern of nested FLWR exprs that we can compile into GROUP BY SQL queries.
    # (TODO: We should be able to pass to a python function a user-created array of values.)
    Relation_candidate: {
      for: { s: Sentence }
      using: {
        UdfRelationSameSent: python('udf/z-ext_relation_samesent.py')
      }
      let: {
        entitiesInThisSentence: {
          for: { e: Entity }
          where: [
            e...docid = s.docid
            e.sentid = s.sentid
          ]
          return: {
            entity_obj : e
            type       : SPLIT(e.type, '-')[-1] # TODO should we support simple string manipulations?
            start      : e.start
            end        : e.end
            entity     : e.entity
          }
        }
        res: UdfRelationSameSent.main(s.words, s.ners, entitiesInThisSentence)
      }
      return: {
        for: { r: res }
        return: {
          e1       : r.e1       :: Entity
          e2       : r.e2       :: Entity
          type     : r.type     :: text
          features : r.features :: text
        }
      }
    }
    ################################################################
    Relation_formationtemporal: {
      # TODO: How to express "SELECT DISTINCT" in our syntax?
      # SOLN: For now, we use the builtin function DISTINCT() in "for".
      for:  { rel: DISTINCT(Relation_candidate) }  ######### HERE!
      where: [ rel.type = 'FORMATIONINTERVAL' ]
      using: { UdfSuperviseFormationTemporal: python('udf/z-supervise_formationtemporal.py') }
      let:   { res: UdfSuperviseFormationTemporal.main(rel.e1...entity, rel.e2...entity) }
      return: {
        rel        : rel :: Relation_candidate
        is_correct : res :: boolean
      }
    }
    ################################################################
  }
}


### Q: What is the exact semantics of "return" block?
################################################################
#     return: {
#       for: { r: res }
#       return: {
#         aaa : r.a :: A
#         bbb : r.b :: B
#     }
#     ################
#     return: {
#       aaa : a :: A
#       bbb : b :: B
#     }
#     ################
#     return: [
#       # when returning multiple
#       {
#         for: { r: res }
#         return: {
#           aaa : r.a :: A
#           bbb : r.b :: B
#         }
#       }
#       # when returning just one
#       {
#         return: {
#           aaa : a :: A
#           bbb : b :: B
#         }
#       }
#     ]
################################################################

# vim:sw=2:sts=2:ts=8
