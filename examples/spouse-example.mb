mindbender {
  
  # Put your extractors here
  artifacts {
    articles {
      producer {
        type: "StandardSingleLineTextParser"
        path: ${APP_HOME}/data/articles_dump.csv
      }
      schema {
        article_id { type: int  } 
        text       { type: text } 
      }
    }

    # nlp_extractor only supports the default extractor.
    sentences {
      inputs: [ articles ]
      producer {
        type: json_extractor
        udf: "examples/nlp_extractor/run.sh -k article_id -v text -l 120 -t 4"
        input: """
          SELECT article_id, text 
          FROM articles 
          ORDER BY article_id ASC
          """
      }
      schema {
        article_id  : articles.article_id
        text        : articles.text
        sentence_id { description:"sent id"     , type: "int"          } 
        words       { description:"words"       , type:"array" , items { type:"string" }  } 
        ner_tags    { description:"words"       , type:"array" , items { type:"string" }  } 
      }
    }


    people_mentions {
      inputs: [ sentences ]
      producer {
        type: json_extractor
        udf: ${APP_HOME}"/udf/ext_people.py"
        # udf: "util/extractor_input_writer.py /tmp/dd-sample-people.txt"  # getting example input data for this extractor
        input: """
            SELECT  sentence_id, words, ner_tags
            FROM    sentences
            """
      }
      schema {
        article_id: articles.article_id
        sentence_id: sentences.sentence_id
        text: sentences.text  # TODO indirect lineage reference?
        start_position { description:"where the mention starts in the sentence", type:int }
        length { description:"how many characters the mention is", type:int }
        mention_id  { description:"mention id", type:text  } 
      }
    }

    has_spouse {
      inputs: [ people_mentions ]
      producer {
        type: json_extractor
        udf: ${APP_HOME}"/udf/ext_has_spouse.py"
        # udf: "util/extractor_input_writer.py /tmp/dd-sample-has_spouse.txt"  # getting example input data for this extractor
        input: """
          SELECT  sentences.sentence_id, 
                  p1.mention_id AS p1_mention_id, 
                  p1.text AS p1_text, 
                  p2.mention_id AS p2_mention_id, 
                  p2.text AS p2_text 
           FROM   people_mentions p1, 
                  people_mentions p2, 
                  sentences 
          WHERE   p1.sentence_id = p2.sentence_id 
            AND   p1.sentence_id = sentences.sentence_id 
            AND   p1.mention_id != p2.mention_id
            """
      }
      schema {
        person1_id: people_mentions.mention_id
        person2_id: people_mentions.mention_id
        sentence_id: sentences.sentence_id
        description: { type:text }
        is_true: { variable:true, type:Boolean }
        relation_id: { type:text }
      }
    }

    has_spouse_features {
      inputs: [ has_spouse ]
      producer {
        type: json_extractor
        udf: ${APP_HOME}"/udf/ext_has_spouse_features.py"
        # udf: "util/extractor_input_writer.py /tmp/dd-sample-features.txt"  # getting example input data for this extractor
        input: """
          SELECT  sentences.words, 
                  lemma,
                  has_spouse.relation_id, 
                  p1.start_position AS p1_start,
                  p1.length AS p1_length,
                  p2.start_position AS p2_start,
                  p2.length AS p2_length
            FROM  has_spouse, 
                  people_mentions p1, 
                  people_mentions p2, 
                  sentences
           WHERE  has_spouse.person1_id = p1.mention_id 
             AND  has_spouse.person2_id = p2.mention_id 
             AND  has_spouse.sentence_id = sentences.sentence_id
             """
      }
      schema {
        relation_id: has_spouse.relation_id
        feature: { type:text }
      }
    }

    # We require developers to select: 
    #   - reserved "id" column, 
    #   - variable column, 
    #   - weight dependencies,
    # for variable tables.
    has_spouse_features_factors {
      producer {
        type: factor
        input_query: """
          SELECT  has_spouse.id AS "has_spouse.id", 
                  has_spouse.is_true AS "has_spouse.is_true", 
                  feature 
          FROM    has_spouse, 
                  has_spouse_features 
          WHERE   has_spouse_features.relation_id = has_spouse.relation_id
          """
        function: "IsTrue(has_spouse.is_true)"
        weight: "?(feature)"
      }
    }

    has_spouse_symmetry {
      producer {
        type: factor
        input_query: """
          SELECT  r1.is_true AS "has_spouse.r1.is_true", 
                  r2.is_true AS "has_spouse.r2.is_true", 
                  r1.id AS "has_spouse.r1.id", 
                  r2.id AS "has_spouse.r2.id"
          FROM    has_spouse r1, 
                  has_spouse r2 
          WHERE   r1.person1_id = r2.person2_id 
            AND   r1.person2_id = r2.person1_id
            """
        function: "Equal(has_spouse.r1.is_true, has_spouse.r2.is_true)"
        weight: "?" # We are pretty sure about this rule
      }
    }

  }

}
